use std::ops::Deref;

use serde::Serialize;

use super::dbus::unit::OrgFreedesktopSystemd1Unit;

#[derive(Serialize)]
#[serde(rename_all="camelCase")]
pub struct UnitDto {
  pub id: String,
  pub names: Vec<String>,
  pub following: String,
  pub requires: Vec<String>,
  pub requisite: Vec<String>,
  pub wants: Vec<String>,
  pub binds_to: Vec<String>,
  pub part_of: Vec<String>,
  pub upholds: Vec<String>,
  pub required_by: Vec<String>,
  pub requisite_of: Vec<String>,
  pub wanted_by: Vec<String>,
  pub bound_by: Vec<String>,
  pub upheld_by: Vec<String>,
  pub consists_of: Vec<String>,
  pub conflicts: Vec<String>,
  pub conflicted_by: Vec<String>,
  pub before: Vec<String>,
  pub after: Vec<String>,
  pub on_success: Vec<String>,
  pub on_success_of: Vec<String>,
  pub on_failure: Vec<String>,
  pub on_failure_of: Vec<String>,
  pub triggers: Vec<String>,
  pub triggered_by: Vec<String>,
  pub propagates_reload_to: Vec<String>,
  pub reload_propagated_from: Vec<String>,
  pub propagates_stop_to: Vec<String>,
  pub stop_propagated_from: Vec<String>,
  pub joins_namespace_of: Vec<String>,
  pub slice_of: Vec<String>,
  pub requires_mounts_for: Vec<String>,
  pub documentation: Vec<String>,
  pub description: String,
  pub access_selinux_context: String,
  pub load_state: String,
  pub active_state: String,
  pub freezer_state: String,
  pub sub_state: String,
  pub fragment_path: String,
  pub source_path: String,
  pub drop_in_paths: Vec<String>,
  pub unit_file_state: String,
  pub unit_file_preset: String,
  pub state_change_timestamp: u64,
  pub state_change_timestamp_monotonic: u64,
  pub inactive_exit_timestamp: u64,
  pub inactive_exit_timestamp_monotonic: u64,
  pub active_enter_timestamp: u64,
  pub active_enter_timestamp_monotonic: u64,
  pub active_exit_timestamp: u64,
  pub active_exit_timestamp_monotonic: u64,
  pub inactive_enter_timestamp: u64,
  pub inactive_enter_timestamp_monotonic: u64,
  pub can_start: bool,
  pub can_stop: bool,
  pub can_reload: bool,
  pub can_isolate: bool,
  pub can_clean: Vec<String>,
  pub can_freeze: bool,
  pub job: (u32, String),
  pub stop_when_unneeded: bool,
  pub refuse_manual_start: bool,
  pub refuse_manual_stop: bool,
  pub allow_isolate: bool,
  pub default_dependencies: bool,
  pub on_success_job_mode: String,
  pub on_failure_job_mode: String,
  pub ignore_on_isolate: bool,
  pub need_daemon_reload: bool,
  pub markers: Vec<String>,
  pub job_timeout_usec: u64,
  pub job_running_timeout_usec: u64,
  pub job_timeout_action: String,
  pub job_timeout_reboot_argument: String,
  pub condition_result: bool,
  pub assert_result: bool,
  pub condition_timestamp: u64,
  pub condition_timestamp_monotonic: u64,
  pub assert_timestamp: u64,
  pub assert_timestamp_monotonic: u64,
  pub conditions: Vec<(String, bool, bool, String, i32)>,
  pub asserts: Vec<(String, bool, bool, String, i32)>,
  pub load_error: (String, String),
  pub transient: bool,
  pub perpetual: bool,
  pub start_limit_interval_usec: u64,
  pub start_limit_burst: u32,
  pub start_limit_action: String,
  pub failure_action: String,
  pub failure_action_exit_status: i32,
  pub success_action: String,
  pub success_action_exit_status: i32,
  pub reboot_argument: String,
  pub invocation_id: Vec<u8>,
  pub collect_mode: String,
  pub refs: Vec<String>,
  pub activation_details: Vec<(String, String)>  
}

impl UnitDto {
  pub fn create_from_proxy(proxy: &impl OrgFreedesktopSystemd1Unit) -> Result<UnitDto, dbus::Error> {
    Ok(UnitDto {
      id: proxy.id()?,
      names: proxy.names()?,
      following: proxy.following()?,
      requires: proxy.requires()?,
      requisite: proxy.requisite()?,
      wants: proxy.wants()?,
      binds_to: proxy.binds_to()?,
      part_of: proxy.part_of()?,
      upholds: proxy.upholds()?,
      required_by: proxy.required_by()?,
      requisite_of: proxy.requisite_of()?,
      wanted_by: proxy.wanted_by()?,
      bound_by: proxy.bound_by()?,
      upheld_by: proxy.upheld_by()?,
      consists_of: proxy.consists_of()?,
      conflicts: proxy.conflicts()?,
      conflicted_by: proxy.conflicted_by()?,
      before: proxy.before()?,
      after: proxy.after()?,
      on_success: proxy.on_success()?,
      on_success_of: proxy.on_success_of()?,
      on_failure: proxy.on_failure()?,
      on_failure_of: proxy.on_failure_of()?,
      triggers: proxy.triggers()?,
      triggered_by: proxy.triggered_by()?,
      propagates_reload_to: proxy.propagates_reload_to()?,
      reload_propagated_from: proxy.reload_propagated_from()?,
      propagates_stop_to: proxy.propagates_stop_to()?,
      stop_propagated_from: proxy.stop_propagated_from()?,
      joins_namespace_of: proxy.joins_namespace_of()?,
      slice_of: proxy.slice_of()?,
      requires_mounts_for: proxy.requires_mounts_for()?,
      documentation: proxy.documentation()?,
      description: proxy.description()?,
      access_selinux_context: proxy.access_selinux_context()?,
      load_state: proxy.load_state()?,
      active_state: proxy.active_state()?,
      freezer_state: proxy.freezer_state()?,
      sub_state: proxy.sub_state()?,
      fragment_path: proxy.fragment_path()?,
      source_path: proxy.source_path()?,
      drop_in_paths: proxy.drop_in_paths()?,
      unit_file_state: proxy.unit_file_state()?,
      unit_file_preset: proxy.unit_file_preset()?,
      state_change_timestamp: proxy.state_change_timestamp()?,
      state_change_timestamp_monotonic: proxy.state_change_timestamp_monotonic()?,
      inactive_exit_timestamp: proxy.inactive_exit_timestamp()?,
      inactive_exit_timestamp_monotonic: proxy.inactive_exit_timestamp_monotonic()?,
      active_enter_timestamp: proxy.active_enter_timestamp()?,
      active_enter_timestamp_monotonic: proxy.active_enter_timestamp_monotonic()?,
      active_exit_timestamp: proxy.active_exit_timestamp()?,
      active_exit_timestamp_monotonic: proxy.active_exit_timestamp_monotonic()?,
      inactive_enter_timestamp: proxy.inactive_enter_timestamp()?,
      inactive_enter_timestamp_monotonic: proxy.inactive_enter_timestamp_monotonic()?,
      can_start: proxy.can_start()?,
      can_stop: proxy.can_stop()?,
      can_reload: proxy.can_reload()?,
      can_isolate: proxy.can_isolate()?,
      can_clean: proxy.can_clean()?,
      can_freeze: proxy.can_freeze()?,
      job: proxy.job().map(|x| (x.0, x.1.deref().to_owned()))?,
      stop_when_unneeded: proxy.stop_when_unneeded()?,
      refuse_manual_start: proxy.refuse_manual_start()?,
      refuse_manual_stop: proxy.refuse_manual_stop()?,
      allow_isolate: proxy.allow_isolate()?,
      default_dependencies: proxy.default_dependencies()?,
      on_success_job_mode: proxy.on_success_job_mode()?,
      on_failure_job_mode: proxy.on_failure_job_mode()?,
      ignore_on_isolate: proxy.ignore_on_isolate()?,
      need_daemon_reload: proxy.need_daemon_reload()?,
      markers: proxy.markers()?,
      job_timeout_usec: proxy.job_timeout_usec()?,
      job_running_timeout_usec: proxy.job_running_timeout_usec()?,
      job_timeout_action: proxy.job_timeout_action()?,
      job_timeout_reboot_argument: proxy.job_timeout_reboot_argument()?,
      condition_result: proxy.condition_result()?,
      assert_result: proxy.assert_result()?,
      condition_timestamp: proxy.condition_timestamp()?,
      condition_timestamp_monotonic: proxy.condition_timestamp_monotonic()?,
      assert_timestamp: proxy.assert_timestamp()?,
      assert_timestamp_monotonic: proxy.assert_timestamp_monotonic()?,
      conditions: proxy.conditions()?,
      asserts: proxy.asserts()?,
      load_error: proxy.load_error()?,
      transient: proxy.transient()?,
      perpetual: proxy.perpetual()?,
      start_limit_interval_usec: proxy.start_limit_interval_usec()?,
      start_limit_burst: proxy.start_limit_burst()?,
      start_limit_action: proxy.start_limit_action()?,
      failure_action: proxy.failure_action()?,
      failure_action_exit_status: proxy.failure_action_exit_status()?,
      success_action: proxy.success_action()?,
      success_action_exit_status: proxy.success_action_exit_status()?,
      reboot_argument: proxy.reboot_argument()?,
      invocation_id: proxy.invocation_id()?,
      collect_mode: proxy.collect_mode()?,
      refs: proxy.refs()?,
      activation_details: proxy.activation_details()? 
    })
  }
}
