use std::ops::Deref;

use serde::Serialize;

use super::dbus::{unit::OrgFreedesktopSystemd1Unit, service::OrgFreedesktopSystemd1Service};

#[derive(Serialize)]
#[serde(rename_all="camelCase")]
pub struct UnitDto {
  pub details: UnitDetails,
  pub id: String,
  pub names: Vec<String>,
  pub following: String,
  pub requires: Vec<String>,
  pub requisite: Vec<String>,
  pub wants: Vec<String>,
  pub binds_to: Vec<String>,
  pub part_of: Vec<String>,
  pub upholds: Vec<String>,
  pub required_by: Vec<String>,
  pub requisite_of: Vec<String>,
  pub wanted_by: Vec<String>,
  pub bound_by: Vec<String>,
  pub upheld_by: Vec<String>,
  pub consists_of: Vec<String>,
  pub conflicts: Vec<String>,
  pub conflicted_by: Vec<String>,
  pub before: Vec<String>,
  pub after: Vec<String>,
  pub on_success: Vec<String>,
  pub on_success_of: Vec<String>,
  pub on_failure: Vec<String>,
  pub on_failure_of: Vec<String>,
  pub triggers: Vec<String>,
  pub triggered_by: Vec<String>,
  pub propagates_reload_to: Vec<String>,
  pub reload_propagated_from: Vec<String>,
  pub propagates_stop_to: Vec<String>,
  pub stop_propagated_from: Vec<String>,
  pub joins_namespace_of: Vec<String>,
  pub slice_of: Vec<String>,
  pub requires_mounts_for: Vec<String>,
  pub documentation: Vec<String>,
  pub description: String,
  pub access_selinux_context: String,
  pub load_state: String,
  pub active_state: String,
  pub freezer_state: String,
  pub sub_state: String,
  pub fragment_path: String,
  pub source_path: String,
  pub drop_in_paths: Vec<String>,
  pub unit_file_state: String,
  pub unit_file_preset: String,
  pub state_change_timestamp: u64,
  pub state_change_timestamp_monotonic: u64,
  pub inactive_exit_timestamp: u64,
  pub inactive_exit_timestamp_monotonic: u64,
  pub active_enter_timestamp: u64,
  pub active_enter_timestamp_monotonic: u64,
  pub active_exit_timestamp: u64,
  pub active_exit_timestamp_monotonic: u64,
  pub inactive_enter_timestamp: u64,
  pub inactive_enter_timestamp_monotonic: u64,
  pub can_start: bool,
  pub can_stop: bool,
  pub can_reload: bool,
  pub can_isolate: bool,
  pub can_clean: Vec<String>,
  pub can_freeze: bool,
  pub job: (u32, String),
  pub stop_when_unneeded: bool,
  pub refuse_manual_start: bool,
  pub refuse_manual_stop: bool,
  pub allow_isolate: bool,
  pub default_dependencies: bool,
  pub on_success_job_mode: String,
  pub on_failure_job_mode: String,
  pub ignore_on_isolate: bool,
  pub need_daemon_reload: bool,
  pub markers: Vec<String>,
  pub job_timeout_usec: u64,
  pub job_running_timeout_usec: u64,
  pub job_timeout_action: String,
  pub job_timeout_reboot_argument: String,
  pub condition_result: bool,
  pub assert_result: bool,
  pub condition_timestamp: u64,
  pub condition_timestamp_monotonic: u64,
  pub assert_timestamp: u64,
  pub assert_timestamp_monotonic: u64,
  pub conditions: Vec<(String, bool, bool, String, i32)>,
  pub asserts: Vec<(String, bool, bool, String, i32)>,
  pub load_error: (String, String),
  pub transient: bool,
  pub perpetual: bool,
  pub start_limit_interval_usec: u64,
  pub start_limit_burst: u32,
  pub start_limit_action: String,
  pub failure_action: String,
  pub failure_action_exit_status: i32,
  pub success_action: String,
  pub success_action_exit_status: i32,
  pub reboot_argument: String,
  pub invocation_id: Vec<u8>,
  pub collect_mode: String,
  pub refs: Vec<String>,
  pub activation_details: Vec<(String, String)>  
}

impl UnitDto {
  pub fn add_details(&mut self, details: UnitDetails) {
    self.details = details;
  }
  pub fn create_from_proxy(proxy: &impl OrgFreedesktopSystemd1Unit) -> Result<UnitDto, dbus::Error> {
    // Should I use maybe .unwrap_or_default in case of DBusError?
    // Coz for example systemd-devs could remove something in the future
    // And then this method will break.
    // But in that case I would lose the information about error, maybe it's better
    // To store list of failed elements with corresponding error?
    // TODO: Think about that UwU
    Ok(UnitDto {
      details: UnitDetails::None,
      id: proxy.id()?,
      names: proxy.names()?,
      following: proxy.following()?,
      requires: proxy.requires()?,
      requisite: proxy.requisite()?,
      wants: proxy.wants()?,
      binds_to: proxy.binds_to()?,
      part_of: proxy.part_of()?,
      upholds: proxy.upholds()?,
      required_by: proxy.required_by()?,
      requisite_of: proxy.requisite_of()?,
      wanted_by: proxy.wanted_by()?,
      bound_by: proxy.bound_by()?,
      upheld_by: proxy.upheld_by()?,
      consists_of: proxy.consists_of()?,
      conflicts: proxy.conflicts()?,
      conflicted_by: proxy.conflicted_by()?,
      before: proxy.before()?,
      after: proxy.after()?,
      on_success: proxy.on_success()?,
      on_success_of: proxy.on_success_of()?,
      on_failure: proxy.on_failure()?,
      on_failure_of: proxy.on_failure_of()?,
      triggers: proxy.triggers()?,
      triggered_by: proxy.triggered_by()?,
      propagates_reload_to: proxy.propagates_reload_to()?,
      reload_propagated_from: proxy.reload_propagated_from()?,
      propagates_stop_to: proxy.propagates_stop_to()?,
      stop_propagated_from: proxy.stop_propagated_from()?,
      joins_namespace_of: proxy.joins_namespace_of()?,
      slice_of: proxy.slice_of()?,
      requires_mounts_for: proxy.requires_mounts_for()?,
      documentation: proxy.documentation()?,
      description: proxy.description()?,
      access_selinux_context: proxy.access_selinux_context()?,
      load_state: proxy.load_state()?,
      active_state: proxy.active_state()?,
      freezer_state: proxy.freezer_state()?,
      sub_state: proxy.sub_state()?,
      fragment_path: proxy.fragment_path()?,
      source_path: proxy.source_path()?,
      drop_in_paths: proxy.drop_in_paths()?,
      unit_file_state: proxy.unit_file_state()?,
      unit_file_preset: proxy.unit_file_preset()?,
      state_change_timestamp: proxy.state_change_timestamp()?,
      state_change_timestamp_monotonic: proxy.state_change_timestamp_monotonic()?,
      inactive_exit_timestamp: proxy.inactive_exit_timestamp()?,
      inactive_exit_timestamp_monotonic: proxy.inactive_exit_timestamp_monotonic()?,
      active_enter_timestamp: proxy.active_enter_timestamp()?,
      active_enter_timestamp_monotonic: proxy.active_enter_timestamp_monotonic()?,
      active_exit_timestamp: proxy.active_exit_timestamp()?,
      active_exit_timestamp_monotonic: proxy.active_exit_timestamp_monotonic()?,
      inactive_enter_timestamp: proxy.inactive_enter_timestamp()?,
      inactive_enter_timestamp_monotonic: proxy.inactive_enter_timestamp_monotonic()?,
      can_start: proxy.can_start()?,
      can_stop: proxy.can_stop()?,
      can_reload: proxy.can_reload()?,
      can_isolate: proxy.can_isolate()?,
      can_clean: proxy.can_clean()?,
      can_freeze: proxy.can_freeze()?,
      job: proxy.job().map(|x| (x.0, x.1.deref().to_owned()))?,
      stop_when_unneeded: proxy.stop_when_unneeded()?,
      refuse_manual_start: proxy.refuse_manual_start()?,
      refuse_manual_stop: proxy.refuse_manual_stop()?,
      allow_isolate: proxy.allow_isolate()?,
      default_dependencies: proxy.default_dependencies()?,
      on_success_job_mode: proxy.on_success_job_mode()?,
      on_failure_job_mode: proxy.on_failure_job_mode()?,
      ignore_on_isolate: proxy.ignore_on_isolate()?,
      need_daemon_reload: proxy.need_daemon_reload()?,
      markers: proxy.markers()?,
      job_timeout_usec: proxy.job_timeout_usec()?,
      job_running_timeout_usec: proxy.job_running_timeout_usec()?,
      job_timeout_action: proxy.job_timeout_action()?,
      job_timeout_reboot_argument: proxy.job_timeout_reboot_argument()?,
      condition_result: proxy.condition_result()?,
      assert_result: proxy.assert_result()?,
      condition_timestamp: proxy.condition_timestamp()?,
      condition_timestamp_monotonic: proxy.condition_timestamp_monotonic()?,
      assert_timestamp: proxy.assert_timestamp()?,
      assert_timestamp_monotonic: proxy.assert_timestamp_monotonic()?,
      conditions: proxy.conditions()?,
      asserts: proxy.asserts()?,
      load_error: proxy.load_error()?,
      transient: proxy.transient()?,
      perpetual: proxy.perpetual()?,
      start_limit_interval_usec: proxy.start_limit_interval_usec()?,
      start_limit_burst: proxy.start_limit_burst()?,
      start_limit_action: proxy.start_limit_action()?,
      failure_action: proxy.failure_action()?,
      failure_action_exit_status: proxy.failure_action_exit_status()?,
      success_action: proxy.success_action()?,
      success_action_exit_status: proxy.success_action_exit_status()?,
      reboot_argument: proxy.reboot_argument()?,
      invocation_id: proxy.invocation_id()?,
      collect_mode: proxy.collect_mode()?,
      refs: proxy.refs()?,
      activation_details: proxy.activation_details()? 
    })
  }
}

#[derive(Serialize)]
#[serde(rename_all="camelCase")]
pub enum UnitDetails {
  Service(ServiceDto),
  None
}

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct ServiceDto {
  #[serde(rename = "type")]
  pub type_: String,
  pub exit_type: String,
  pub restart: String,
  pub pidfile: String,
  pub notify_access: String,
  pub restart_usec: u64,
  pub timeout_start_usec: u64,
  pub timeout_stop_usec: u64,
  pub timeout_abort_usec: u64,
  pub timeout_start_failure_mode: String,
  pub timeout_stop_failure_mode: String,
  pub runtime_max_usec: u64,
  pub runtime_randomized_extra_usec: u64,
  pub watchdog_usec: u64,
  pub watchdog_timestamp: u64,
  pub watchdog_timestamp_monotonic: u64,
  pub root_directory_start_only: bool,
  pub remain_after_exit: bool,
  pub guess_main_pid: bool,
  pub restart_prevent_exit_status: (Vec<i32>, Vec<i32>),
  pub restart_force_exit_status: (Vec<i32>, Vec<i32>),
  pub success_exit_status: (Vec<i32>, Vec<i32>),
  pub main_pid: u32,
  pub control_pid: u32,
  pub bus_name: String,
  pub file_descriptor_store_max: u32,
  pub nfile_descriptor_store: u32,
  pub status_text: String,
  pub status_errno: i32,
  pub result: String,
  pub reload_result: String,
  pub clean_result: String,
  pub usbfunction_descriptors: String,
  pub usbfunction_strings: String,
  pub uid: u32,
  pub gid: u32,
  pub nrestarts: u32,
  pub oompolicy: String,
  pub exec_main_start_timestamp: u64,
  pub exec_main_start_timestamp_monotonic: u64,
  pub exec_main_exit_timestamp: u64,
  pub exec_main_exit_timestamp_monotonic: u64,
  pub exec_main_pid: u32,
  pub exec_main_code: i32,
  pub exec_main_status: i32,
  pub exec_condition: Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_condition_ex: Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_start_pre: Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_start_pre_ex: Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_start: Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_start_ex: Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_start_post: Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_start_post_ex: Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_reload: Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_reload_ex: Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_stop: Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_stop_ex: Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_stop_post: Vec<(String, Vec<String>, bool, u64, u64, u64, u64, u32, i32, i32)>,
  pub exec_stop_post_ex: Vec<(String, Vec<String>, Vec<String>, u64, u64, u64, u64, u32, i32, i32)>,
  pub slice: String,
  pub control_group: String,
  pub control_group_id: u64,
  pub memory_current: u64,
  pub memory_available: u64,
  pub cpuusage_nsec: u64,
  pub effective_cpus: Vec<u8>,
  pub effective_memory_nodes: Vec<u8>,
  pub tasks_current: u64,
  pub ipingress_bytes: u64,
  pub ipingress_packets: u64,
  pub ipegress_bytes: u64,
  pub ipegress_packets: u64,
  pub ioread_bytes: u64,
  pub ioread_operations: u64,
  pub iowrite_bytes: u64,
  pub iowrite_operations: u64,
  pub delegate: bool,
  pub delegate_controllers: Vec<String>,
  pub cpuaccounting: bool,
  pub cpuweight: u64,
  pub startup_cpuweight: u64,
  pub cpushares: u64,
  pub startup_cpushares: u64,
  pub cpuquota_per_sec_usec: u64,
  pub cpuquota_period_usec: u64,
  pub allowed_cpus: Vec<u8>,
  pub startup_allowed_cpus: Vec<u8>,
  pub allowed_memory_nodes: Vec<u8>,
  pub startup_allowed_memory_nodes: Vec<u8>,
  pub ioaccounting: bool,
  pub ioweight: u64,
  pub startup_ioweight: u64,
  pub iodevice_weight: Vec<(String, u64)>,
  pub ioread_bandwidth_max: Vec<(String, u64)>,
  pub iowrite_bandwidth_max: Vec<(String, u64)>,
  pub ioread_iopsmax: Vec<(String, u64)>,
  pub iowrite_iopsmax: Vec<(String, u64)>,
  pub iodevice_latency_target_usec: Vec<(String, u64)>,
  pub block_ioaccounting: bool,
  pub block_ioweight: u64,
  pub startup_block_ioweight: u64,
  pub block_iodevice_weight: Vec<(String, u64)>,
  pub block_ioread_bandwidth: Vec<(String, u64)>,
  pub block_iowrite_bandwidth: Vec<(String, u64)>,
  pub memory_accounting: bool,
  pub default_memory_low: u64,
  pub default_memory_min: u64,
  pub memory_min: u64,
  pub memory_low: u64,
  pub memory_high: u64,
  pub memory_max: u64,
  pub memory_swap_max: u64,
  pub memory_limit: u64,
  pub device_policy: String,
  pub device_allow: Vec<(String, String)>,
  pub tasks_accounting: bool,
  pub tasks_max: u64,
  pub ipaccounting: bool,
  pub ipaddress_allow: Vec<(i32, Vec<u8>, u32)>,
  pub ipaddress_deny: Vec<(i32, Vec<u8>, u32)>,
  pub ipingress_filter_path: Vec<String>,
  pub ipegress_filter_path: Vec<String>,
  pub disable_controllers: Vec<String>,
  pub managed_oomswap: String,
  pub managed_oommemory_pressure: String,
  pub managed_oommemory_pressure_limit: u32,
  pub managed_oompreference: String,
  pub bpfprogram: Vec<(String, String)>,
  pub socket_bind_allow: Vec<(i32, i32, u16, u16)>,
  pub socket_bind_deny: Vec<(i32, i32, u16, u16)>,
  pub restrict_network_interfaces: (bool, Vec<String>),
  pub environment: Vec<String>,
  pub environment_files: Vec<(String, bool)>,
  pub pass_environment: Vec<String>,
  pub unset_environment: Vec<String>,
  pub umask: u32,
  pub limit_cpu: u64,
  pub limit_cpusoft: u64,
  pub limit_fsize: u64,
  pub limit_fsizesoft: u64,
  pub limit_data: u64,
  pub limit_datasoft: u64,
  pub limit_stack: u64,
  pub limit_stacksoft: u64,
  pub limit_core: u64,
  pub limit_coresoft: u64,
  pub limit_rss: u64,
  pub limit_rsssoft: u64,
  pub limit_nofile: u64,
  pub limit_nofilesoft: u64,
  pub limit_as: u64,
  pub limit_assoft: u64,
  pub limit_nproc: u64,
  pub limit_nprocsoft: u64,
  pub limit_memlock: u64,
  pub limit_memlocksoft: u64,
  pub limit_locks: u64,
  pub limit_lockssoft: u64,
  pub limit_sigpending: u64,
  pub limit_sigpendingsoft: u64,
  pub limit_msgqueue: u64,
  pub limit_msgqueuesoft: u64,
  pub limit_nice: u64,
  pub limit_nicesoft: u64,
  pub limit_rtprio: u64,
  pub limit_rtpriosoft: u64,
  pub limit_rttime: u64,
  pub limit_rttimesoft: u64,
  pub working_directory: String,
  pub root_directory: String,
  pub root_image: String,
  pub root_image_options: Vec<(String, String)>,
  pub root_hash: Vec<u8>,
  pub root_hash_path: String,
  pub root_hash_signature: Vec<u8>,
  pub root_hash_signature_path: String,
  pub root_verity: String,
  pub extension_directories: Vec<String>,
  pub extension_images: Vec<(String, bool, Vec<(String, String)>)>,
  pub mount_images: Vec<(String, String, bool, Vec<(String, String)>)>,
  pub oomscore_adjust: i32,
  pub coredump_filter: u64,
  pub nice: i32,
  pub ioscheduling_class: i32,
  pub ioscheduling_priority: i32,
  pub cpuscheduling_policy: i32,
  pub cpuscheduling_priority: i32,
  pub cpuaffinity: Vec<u8>,
  pub cpuaffinity_from_numa: bool,
  pub numapolicy: i32,
  pub numamask: Vec<u8>,
  pub timer_slack_nsec: u64,
  pub cpuscheduling_reset_on_fork: bool,
  pub non_blocking: bool,
  pub standard_input: String,
  pub standard_input_file_descriptor_name: String,
  pub standard_input_data: Vec<u8>,
  pub standard_output: String,
  pub standard_output_file_descriptor_name: String,
  pub standard_error: String,
  pub standard_error_file_descriptor_name: String,
  pub ttypath: String,
  pub ttyreset: bool,
  pub ttyvhangup: bool,
  pub ttyvtdisallocate: bool,
  pub ttyrows: u16,
  pub ttycolumns: u16,
  pub syslog_priority: i32,
  pub syslog_identifier: String,
  pub syslog_level_prefix: bool,
  pub syslog_level: i32,
  pub syslog_facility: i32,
  pub log_level_max: i32,
  pub log_rate_limit_interval_usec: u64,
  pub log_rate_limit_burst: u32,
  pub log_extra_fields: Vec<Vec<u8>>,
  pub log_namespace: String,
  pub secure_bits: i32,
  pub capability_bounding_set: u64,
  pub ambient_capabilities: u64,
  pub user: String,
  pub group: String,
  pub dynamic_user: bool,
  pub remove_ipc: bool,
  pub set_credential: Vec<(String, Vec<u8>)>,
  pub set_credential_encrypted: Vec<(String, Vec<u8>)>,
  pub load_credential: Vec<(String, String)>,
  pub load_credential_encrypted: Vec<(String, String)>,
  pub supplementary_groups: Vec<String>,
  pub pamname: String,
  pub read_write_paths: Vec<String>,
  pub read_only_paths: Vec<String>,
  pub inaccessible_paths: Vec<String>,
  pub exec_paths: Vec<String>,
  pub no_exec_paths: Vec<String>,
  pub exec_search_path: Vec<String>,
  pub mount_flags: u64,
  pub private_tmp: bool,
  pub private_devices: bool,
  pub protect_clock: bool,
  pub protect_kernel_tunables: bool,
  pub protect_kernel_modules: bool,
  pub protect_kernel_logs: bool,
  pub protect_control_groups: bool,
  pub private_network: bool,
  pub private_users: bool,
  pub private_mounts: bool,
  pub private_ipc: bool,
  pub protect_home: String,
  pub protect_system: String,
  pub same_process_group: bool,
  pub utmp_identifier: String,
  pub utmp_mode: String,
  pub selinux_context: (bool, String),
  pub app_armor_profile: (bool, String),
  pub smack_process_label: (bool, String),
  pub ignore_sigpipe: bool,
  pub no_new_privileges: bool,
  pub system_call_filter: (bool, Vec<String>),
  pub system_call_architectures: Vec<String>,
  pub system_call_error_number: i32,
  pub system_call_log: (bool, Vec<String>),
  pub personality: String,
  pub lock_personality: bool,
  pub restrict_address_families: (bool, Vec<String>),
  pub runtime_directory_symlink: Vec<(String, String, u64)>,
  pub runtime_directory_preserve: String,
  pub runtime_directory_mode: u32,
  pub runtime_directory: Vec<String>,
  pub state_directory_symlink: Vec<(String, String, u64)>,
  pub state_directory_mode: u32,
  pub state_directory: Vec<String>,
  pub cache_directory_symlink: Vec<(String, String, u64)>,
  pub cache_directory_mode: u32,
  pub cache_directory: Vec<String>,
  pub logs_directory_symlink: Vec<(String, String, u64)>,
  pub logs_directory_mode: u32,
  pub logs_directory: Vec<String>,
  pub configuration_directory_mode: u32,
  pub configuration_directory: Vec<String>,
  pub timeout_clean_usec: u64,
  pub memory_deny_write_execute: bool,
  pub restrict_realtime: bool,
  pub restrict_suidsgid: bool,
  pub restrict_namespaces: u64,
  pub restrict_file_systems: (bool, Vec<String>),
  pub bind_paths: Vec<(String, String, bool, u64)>,
  pub bind_read_only_paths: Vec<(String, String, bool, u64)>,
  pub temporary_file_system: Vec<(String, String)>,
  pub mount_apivfs: bool,
  pub keyring_mode: String,
  pub protect_proc: String,
  pub proc_subset: String,
  pub protect_hostname: bool,
  pub network_namespace_path: String,
  pub ipcnamespace_path: String,
  pub kill_mode: String,
  pub kill_signal: i32,
  pub restart_kill_signal: i32,
  pub final_kill_signal: i32,
  pub send_sigkill: bool,
  pub send_sighup: bool,
  pub watchdog_signal: i32
}

impl ServiceDto {
  pub fn create_from_proxy(proxy: &impl OrgFreedesktopSystemd1Service) -> Result<ServiceDto, dbus::Error> {
    Ok(ServiceDto {
      type_: proxy.type_()?,
      exit_type: proxy.exit_type()?,
      restart: proxy.restart()?,
      pidfile: proxy.pidfile()?,
      notify_access: proxy.notify_access()?,
      restart_usec: proxy.restart_usec()?,
      timeout_start_usec: proxy.timeout_start_usec()?,
      timeout_stop_usec: proxy.timeout_stop_usec()?,
      timeout_abort_usec: proxy.timeout_abort_usec()?,
      timeout_start_failure_mode: proxy.timeout_start_failure_mode()?,
      timeout_stop_failure_mode: proxy.timeout_stop_failure_mode()?,
      runtime_max_usec: proxy.runtime_max_usec()?,
      runtime_randomized_extra_usec: proxy.runtime_randomized_extra_usec()?,
      watchdog_usec: proxy.watchdog_usec()?,
      watchdog_timestamp: proxy.watchdog_timestamp()?,
      watchdog_timestamp_monotonic: proxy.watchdog_timestamp_monotonic()?,
      root_directory_start_only: proxy.root_directory_start_only()?,
      remain_after_exit: proxy.remain_after_exit()?,
      guess_main_pid: proxy.guess_main_pid()?,
      restart_prevent_exit_status: proxy.restart_prevent_exit_status()?,
      restart_force_exit_status: proxy.restart_force_exit_status()?,
      success_exit_status: proxy.success_exit_status()?,
      main_pid: proxy.main_pid()?,
      control_pid: proxy.control_pid()?,
      bus_name: proxy.bus_name()?,
      file_descriptor_store_max: proxy.file_descriptor_store_max()?,
      nfile_descriptor_store: proxy.nfile_descriptor_store()?,
      status_text: proxy.status_text()?,
      status_errno: proxy.status_errno()?,
      result: proxy.result()?,
      reload_result: proxy.reload_result()?,
      clean_result: proxy.clean_result()?,
      usbfunction_descriptors: proxy.usbfunction_descriptors()?,
      usbfunction_strings: proxy.usbfunction_strings()?,
      uid: proxy.uid()?,
      gid: proxy.gid()?,
      nrestarts: proxy.nrestarts()?,
      oompolicy: proxy.oompolicy()?,
      exec_main_start_timestamp: proxy.exec_main_start_timestamp()?,
      exec_main_start_timestamp_monotonic: proxy.exec_main_start_timestamp_monotonic()?,
      exec_main_exit_timestamp: proxy.exec_main_exit_timestamp()?,
      exec_main_exit_timestamp_monotonic: proxy.exec_main_exit_timestamp_monotonic()?,
      exec_main_pid: proxy.exec_main_pid()?,
      exec_main_code: proxy.exec_main_code()?,
      exec_main_status: proxy.exec_main_status()?,
      exec_condition: proxy.exec_condition()?,
      exec_condition_ex: proxy.exec_condition_ex()?,
      exec_start_pre: proxy.exec_start_pre()?,
      exec_start_pre_ex: proxy.exec_start_pre_ex()?,
      exec_start: proxy.exec_start()?,
      exec_start_ex: proxy.exec_start_ex()?,
      exec_start_post: proxy.exec_start_post()?,
      exec_start_post_ex: proxy.exec_start_post_ex()?,
      exec_reload: proxy.exec_reload()?,
      exec_reload_ex: proxy.exec_reload_ex()?,
      exec_stop: proxy.exec_stop()?,
      exec_stop_ex: proxy.exec_stop_ex()?,
      exec_stop_post: proxy.exec_stop_post()?,
      exec_stop_post_ex: proxy.exec_stop_post_ex()?,
      slice: proxy.slice()?,
      control_group: proxy.control_group()?,
      control_group_id: proxy.control_group_id()?,
      memory_current: proxy.memory_current()?,
      memory_available: proxy.memory_available()?,
      cpuusage_nsec: proxy.cpuusage_nsec()?,
      effective_cpus: proxy.effective_cpus()?,
      effective_memory_nodes: proxy.effective_memory_nodes()?,
      tasks_current: proxy.tasks_current()?,
      ipingress_bytes: proxy.ipingress_bytes()?,
      ipingress_packets: proxy.ipingress_packets()?,
      ipegress_bytes: proxy.ipegress_bytes()?,
      ipegress_packets: proxy.ipegress_packets()?,
      ioread_bytes: proxy.ioread_bytes()?,
      ioread_operations: proxy.ioread_operations()?,
      iowrite_bytes: proxy.iowrite_bytes()?,
      iowrite_operations: proxy.iowrite_operations()?,
      delegate: proxy.delegate()?,
      delegate_controllers: proxy.delegate_controllers()?,
      cpuaccounting: proxy.cpuaccounting()?,
      cpuweight: proxy.cpuweight()?,
      startup_cpuweight: proxy.startup_cpuweight()?,
      cpushares: proxy.cpushares()?,
      startup_cpushares: proxy.startup_cpushares()?,
      cpuquota_per_sec_usec: proxy.cpuquota_per_sec_usec()?,
      cpuquota_period_usec: proxy.cpuquota_period_usec()?,
      allowed_cpus: proxy.allowed_cpus()?,
      startup_allowed_cpus: proxy.startup_allowed_cpus()?,
      allowed_memory_nodes: proxy.allowed_memory_nodes()?,
      startup_allowed_memory_nodes: proxy.startup_allowed_memory_nodes()?,
      ioaccounting: proxy.ioaccounting()?,
      ioweight: proxy.ioweight()?,
      startup_ioweight: proxy.startup_ioweight()?,
      iodevice_weight: proxy.iodevice_weight()?,
      ioread_bandwidth_max: proxy.ioread_bandwidth_max()?,
      iowrite_bandwidth_max: proxy.iowrite_bandwidth_max()?,
      ioread_iopsmax: proxy.ioread_iopsmax()?,
      iowrite_iopsmax: proxy.iowrite_iopsmax()?,
      iodevice_latency_target_usec: proxy.iodevice_latency_target_usec()?,
      block_ioaccounting: proxy.block_ioaccounting()?,
      block_ioweight: proxy.block_ioweight()?,
      startup_block_ioweight: proxy.startup_block_ioweight()?,
      block_iodevice_weight: proxy.block_iodevice_weight()?,
      block_ioread_bandwidth: proxy.block_ioread_bandwidth()?,
      block_iowrite_bandwidth: proxy.block_iowrite_bandwidth()?,
      memory_accounting: proxy.memory_accounting()?,
      default_memory_low: proxy.default_memory_low()?,
      default_memory_min: proxy.default_memory_min()?,
      memory_min: proxy.memory_min()?,
      memory_low: proxy.memory_low()?,
      memory_high: proxy.memory_high()?,
      memory_max: proxy.memory_max()?,
      memory_swap_max: proxy.memory_swap_max()?,
      memory_limit: proxy.memory_limit()?,
      device_policy: proxy.device_policy()?,
      device_allow: proxy.device_allow()?,
      tasks_accounting: proxy.tasks_accounting()?,
      tasks_max: proxy.tasks_max()?,
      ipaccounting: proxy.ipaccounting()?,
      ipaddress_allow: proxy.ipaddress_allow()?,
      ipaddress_deny: proxy.ipaddress_deny()?,
      ipingress_filter_path: proxy.ipingress_filter_path()?,
      ipegress_filter_path: proxy.ipegress_filter_path()?,
      disable_controllers: proxy.disable_controllers()?,
      managed_oomswap: proxy.managed_oomswap()?,
      managed_oommemory_pressure: proxy.managed_oommemory_pressure()?,
      managed_oommemory_pressure_limit: proxy.managed_oommemory_pressure_limit()?,
      managed_oompreference: proxy.managed_oompreference()?,
      bpfprogram: proxy.bpfprogram()?,
      socket_bind_allow: proxy.socket_bind_allow()?,
      socket_bind_deny: proxy.socket_bind_deny()?,
      restrict_network_interfaces: proxy.restrict_network_interfaces()?,
      environment: proxy.environment()?,
      environment_files: proxy.environment_files()?,
      pass_environment: proxy.pass_environment()?,
      unset_environment: proxy.unset_environment()?,
      umask: proxy.umask()?,
      limit_cpu: proxy.limit_cpu()?,
      limit_cpusoft: proxy.limit_cpusoft()?,
      limit_fsize: proxy.limit_fsize()?,
      limit_fsizesoft: proxy.limit_fsizesoft()?,
      limit_data: proxy.limit_data()?,
      limit_datasoft: proxy.limit_datasoft()?,
      limit_stack: proxy.limit_stack()?,
      limit_stacksoft: proxy.limit_stacksoft()?,
      limit_core: proxy.limit_core()?,
      limit_coresoft: proxy.limit_coresoft()?,
      limit_rss: proxy.limit_rss()?,
      limit_rsssoft: proxy.limit_rsssoft()?,
      limit_nofile: proxy.limit_nofile()?,
      limit_nofilesoft: proxy.limit_nofilesoft()?,
      limit_as: proxy.limit_as()?,
      limit_assoft: proxy.limit_assoft()?,
      limit_nproc: proxy.limit_nproc()?,
      limit_nprocsoft: proxy.limit_nprocsoft()?,
      limit_memlock: proxy.limit_memlock()?,
      limit_memlocksoft: proxy.limit_memlocksoft()?,
      limit_locks: proxy.limit_locks()?,
      limit_lockssoft: proxy.limit_lockssoft()?,
      limit_sigpending: proxy.limit_sigpending()?,
      limit_sigpendingsoft: proxy.limit_sigpendingsoft()?,
      limit_msgqueue: proxy.limit_msgqueue()?,
      limit_msgqueuesoft: proxy.limit_msgqueuesoft()?,
      limit_nice: proxy.limit_nice()?,
      limit_nicesoft: proxy.limit_nicesoft()?,
      limit_rtprio: proxy.limit_rtprio()?,
      limit_rtpriosoft: proxy.limit_rtpriosoft()?,
      limit_rttime: proxy.limit_rttime()?,
      limit_rttimesoft: proxy.limit_rttimesoft()?,
      working_directory: proxy.working_directory()?,
      root_directory: proxy.root_directory()?,
      root_image: proxy.root_image()?,
      root_image_options: proxy.root_image_options()?,
      root_hash: proxy.root_hash()?,
      root_hash_path: proxy.root_hash_path()?,
      root_hash_signature: proxy.root_hash_signature()?,
      root_hash_signature_path: proxy.root_hash_signature_path()?,
      root_verity: proxy.root_verity()?,
      extension_directories: proxy.extension_directories()?,
      extension_images: proxy.extension_images()?,
      mount_images: proxy.mount_images()?,
      oomscore_adjust: proxy.oomscore_adjust()?,
      coredump_filter: proxy.coredump_filter()?,
      nice: proxy.nice()?,
      ioscheduling_class: proxy.ioscheduling_class()?,
      ioscheduling_priority: proxy.ioscheduling_priority()?,
      cpuscheduling_policy: proxy.cpuscheduling_policy()?,
      cpuscheduling_priority: proxy.cpuscheduling_priority()?,
      cpuaffinity: proxy.cpuaffinity()?,
      cpuaffinity_from_numa: proxy.cpuaffinity_from_numa()?,
      numapolicy: proxy.numapolicy()?,
      numamask: proxy.numamask()?,
      timer_slack_nsec: proxy.timer_slack_nsec()?,
      cpuscheduling_reset_on_fork: proxy.cpuscheduling_reset_on_fork()?,
      non_blocking: proxy.non_blocking()?,
      standard_input: proxy.standard_input()?,
      standard_input_file_descriptor_name: proxy.standard_input_file_descriptor_name()?,
      standard_input_data: proxy.standard_input_data()?,
      standard_output: proxy.standard_output()?,
      standard_output_file_descriptor_name: proxy.standard_output_file_descriptor_name()?,
      standard_error: proxy.standard_error()?,
      standard_error_file_descriptor_name: proxy.standard_error_file_descriptor_name()?,
      ttypath: proxy.ttypath()?,
      ttyreset: proxy.ttyreset()?,
      ttyvhangup: proxy.ttyvhangup()?,
      ttyvtdisallocate: proxy.ttyvtdisallocate()?,
      ttyrows: proxy.ttyrows()?,
      ttycolumns: proxy.ttycolumns()?,
      syslog_priority: proxy.syslog_priority()?,
      syslog_identifier: proxy.syslog_identifier()?,
      syslog_level_prefix: proxy.syslog_level_prefix()?,
      syslog_level: proxy.syslog_level()?,
      syslog_facility: proxy.syslog_facility()?,
      log_level_max: proxy.log_level_max()?,
      log_rate_limit_interval_usec: proxy.log_rate_limit_interval_usec()?,
      log_rate_limit_burst: proxy.log_rate_limit_burst()?,
      log_extra_fields: proxy.log_extra_fields()?,
      log_namespace: proxy.log_namespace()?,
      secure_bits: proxy.secure_bits()?,
      capability_bounding_set: proxy.capability_bounding_set()?,
      ambient_capabilities: proxy.ambient_capabilities()?,
      user: proxy.user()?,
      group: proxy.group()?,
      dynamic_user: proxy.dynamic_user()?,
      remove_ipc: proxy.remove_ipc()?,
      set_credential: proxy.set_credential()?,
      set_credential_encrypted: proxy.set_credential_encrypted()?,
      load_credential: proxy.load_credential()?,
      load_credential_encrypted: proxy.load_credential_encrypted()?,
      supplementary_groups: proxy.supplementary_groups()?,
      pamname: proxy.pamname()?,
      read_write_paths: proxy.read_write_paths()?,
      read_only_paths: proxy.read_only_paths()?,
      inaccessible_paths: proxy.inaccessible_paths()?,
      exec_paths: proxy.exec_paths()?,
      no_exec_paths: proxy.no_exec_paths()?,
      exec_search_path: proxy.exec_search_path()?,
      mount_flags: proxy.mount_flags()?,
      private_tmp: proxy.private_tmp()?,
      private_devices: proxy.private_devices()?,
      protect_clock: proxy.protect_clock()?,
      protect_kernel_tunables: proxy.protect_kernel_tunables()?,
      protect_kernel_modules: proxy.protect_kernel_modules()?,
      protect_kernel_logs: proxy.protect_kernel_logs()?,
      protect_control_groups: proxy.protect_control_groups()?,
      private_network: proxy.private_network()?,
      private_users: proxy.private_users()?,
      private_mounts: proxy.private_mounts()?,
      private_ipc: proxy.private_ipc()?,
      protect_home: proxy.protect_home()?,
      protect_system: proxy.protect_system()?,
      same_process_group: proxy.same_process_group()?,
      utmp_identifier: proxy.utmp_identifier()?,
      utmp_mode: proxy.utmp_mode()?,
      selinux_context: proxy.selinux_context()?,
      app_armor_profile: proxy.app_armor_profile()?,
      smack_process_label: proxy.smack_process_label()?,
      ignore_sigpipe: proxy.ignore_sigpipe()?,
      no_new_privileges: proxy.no_new_privileges()?,
      system_call_filter: proxy.system_call_filter()?,
      system_call_architectures: proxy.system_call_architectures()?,
      system_call_error_number: proxy.system_call_error_number()?,
      system_call_log: proxy.system_call_log()?,
      personality: proxy.personality()?,
      lock_personality: proxy.lock_personality()?,
      restrict_address_families: proxy.restrict_address_families()?,
      runtime_directory_symlink: proxy.runtime_directory_symlink()?,
      runtime_directory_preserve: proxy.runtime_directory_preserve()?,
      runtime_directory_mode: proxy.runtime_directory_mode()?,
      runtime_directory: proxy.runtime_directory()?,
      state_directory_symlink: proxy.state_directory_symlink()?,
      state_directory_mode: proxy.state_directory_mode()?,
      state_directory: proxy.state_directory()?,
      cache_directory_symlink: proxy.cache_directory_symlink()?,
      cache_directory_mode: proxy.cache_directory_mode()?,
      cache_directory: proxy.cache_directory()?,
      logs_directory_symlink: proxy.logs_directory_symlink()?,
      logs_directory_mode: proxy.logs_directory_mode()?,
      logs_directory: proxy.logs_directory()?,
      configuration_directory_mode: proxy.configuration_directory_mode()?,
      configuration_directory: proxy.configuration_directory()?,
      timeout_clean_usec: proxy.timeout_clean_usec()?,
      memory_deny_write_execute: proxy.memory_deny_write_execute()?,
      restrict_realtime: proxy.restrict_realtime()?,
      restrict_suidsgid: proxy.restrict_suidsgid()?,
      restrict_namespaces: proxy.restrict_namespaces()?,
      restrict_file_systems: proxy.restrict_file_systems()?,
      bind_paths: proxy.bind_paths()?,
      bind_read_only_paths: proxy.bind_read_only_paths()?,
      temporary_file_system: proxy.temporary_file_system()?,
      mount_apivfs: proxy.mount_apivfs()?,
      keyring_mode: proxy.keyring_mode()?,
      protect_proc: proxy.protect_proc()?,
      proc_subset: proxy.proc_subset()?,
      protect_hostname: proxy.protect_hostname()?,
      network_namespace_path: proxy.network_namespace_path()?,
      ipcnamespace_path: proxy.ipcnamespace_path()?,
      kill_mode: proxy.kill_mode()?,
      kill_signal: proxy.kill_signal()?,
      restart_kill_signal: proxy.restart_kill_signal()?,
      final_kill_signal: proxy.final_kill_signal()?,
      send_sigkill: proxy.send_sigkill()?,
      send_sighup: proxy.send_sighup()?,
      watchdog_signal: proxy.watchdog_signal()?
    })
  }
}
